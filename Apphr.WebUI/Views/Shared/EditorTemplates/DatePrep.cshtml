@model DateTime?
@{
    var _attr = new Dictionary<string, object>();

    _attr.Add("class", "form-control");
    _attr.Add("type", "date");
    if (ViewData["min"] != null) { _attr.Add("min", ViewData["min"]); }
    if (ViewData["max"] != null) { _attr.Add("max", ViewData["max"]); }
}
<div class="input-group @(ViewData["groupSize"] != null ? string.Format("input-group-{0}", ViewData["groupSize"]) : null) mb-2">
    <span class="input-group-text @(ViewData["visualContext"] != null ? string.Format("bg-{0}", ViewData["visualContext"]) : null)@(ViewData["prependClass"] != null ? " " + ViewData["prependClass"] : "")"
          data-aos="@(ViewData["aos"] != null ? ViewData["aos"] : "slide-left")"
          data-aos-easing="@(ViewData["aos_easing"] != null ? ViewData["aos_easing"] : "ease-out-cubic")"
          data-aos-delay="@(ViewData["aos_delay"] != null ? ViewData["aos_delay"] : null)"
          data-aos-duration="@(ViewData["aos_duration"] != null ? ViewData["aos_duration"] : null)"
          data-aos-anchor-placement="top-bottom">
        @if (ViewData["label"] != null)
        {
            @Html.LabelFor(x => x, ((string)ViewData["label"]), new { @class = "mb-0" })
        }
        else
        {
            @Html.LabelFor(x => x, new { @class = "mb-0" })
        }
        @if (ViewData["prependIcon"] != null)
        {
            <i class="ms-1 fa fa-@ViewData["prependIcon"]"></i>
        }
    </span>
    @Html.TextBox("", Model.HasValue ? Model.Value.ToString("yyyy-MM-dd") : null, _attr)
</div>
@Html.ValidationMessageFor(x => x, null, new { @class = "text-danger" })